Q1. When would you want to use a remote repository rather than keeping all your work local?
A: When some big changes are made, other contributors can review the lastest version easily.

Q2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
A: So that I can be aware of any changes recently made. Besides, I can pull the remote to the branches other than local master.
   Also, if somehow, I get my local master messy, I don't want any auto-update from remote to make it more messy!

Q3. Describe the differences between forks, clones, and branches. When would you use one instead of another?
A: fork: To get a copy of repo from other people at GitHub and save it at GitHub
   clone: To make a copy of my own repo. It cound happens at local to local or at GitHub to GitHub.
   branch: Only at local, to extend a branch from the master of a current repo.

Q4. What is the benefit of having a copy of the last known state of the remote stored locally?
A: It wound be the baseline that allows user to know what changes are made from that point.
   Also, the baseline is sync to one point of the repo at GitHub, then changes at GitHub can be figure out.

Q5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
A: Without Git or GitHub, I got to ask others if any changes are made by them to ensure I have the   
   most-updated file. Git surely helps a lot.

Q6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A: If I want to add some features or experiment some ideas, I would definitely do it on a separate branch.
   Doing directly in master seems a straight forward way, but things will become much complicated and hard
   to control if there are other contributors working on the same repo at the same time.




